import tkinter as tk
from tkinter import messagebox
from database import Database
from dialogs import PasswordDialog, SecretPasswordDialog, AddSecretDialog
from ui_components import LockScreen, Theme, RoundedButton


class SecretWallet:
    def __init__(self, root):
        self.root = root
        self.root.title("üîê Storage of Secrets")

        try:
            self.root.iconphoto(True, tk.PhotoImage(file="Hakaton_image.png"))
        except:
            try:
                self.root.iconphoto(True, tk.PhotoImage(file="Hakaton_image.jpg"))
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        self.root.state('zoomed')
        self.db = Database()
        self.current_secret_name = None
        self.current_secret_data = None
        self.theme_manager = Theme()
        self.current_theme = self.theme_manager.get_theme()
        self.lock_screen = LockScreen(root)
        self.verify_master_password_on_startup()

    def verify_master_password_on_startup(self):
        if not self.db.is_master_password_set():
            self.lock_screen.destroy()
            messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.")

            while True:
                password = self.ask_password("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")
                if not password:
                    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                           "–ë–µ–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ–∫—Ä–µ—Ç—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã?"):
                        self.root.destroy()
                        return
                    continue

                confirm = self.ask_password("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")

                if password == confirm:
                    if self.db.set_master_password(password):
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                        self.setup_ui()
                        self.apply_theme()
                        self.load_secrets()
                        break
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            password = self.ask_password("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")
            if not password or not self.db.verify_master_password(password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                self.root.destroy()
            else:
                self.lock_screen.destroy()
                self.setup_ui()
                self.apply_theme()
                self.load_secrets()

    def ask_password(self, title, prompt):
        return PasswordDialog(self.root, title, prompt).show()

    def ask_password_for_secret(self, secret_name, action="–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"):
        return SecretPasswordDialog(
            self.root, secret_name, action, self.current_theme
        ).show()

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg=self.current_theme["bg"])
        main_frame.pack(fill=tk.BOTH, expand=True)

        search_frame = tk.Frame(main_frame, bg=self.current_theme["bg"])
        search_frame.pack(fill=tk.X, pady=(12, 8), padx=12)

        tk.Label(search_frame, text="–ü–æ–∏—Å–∫:", bg=self.current_theme["bg"], fg=self.current_theme["fg"],
                 font=("Arial", 12)).pack(
            side=tk.LEFT, padx=(0, 8))

        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=40,
                                     bg=self.current_theme["entry_bg"], fg=self.current_theme["entry_fg"],
                                     insertbackground=self.current_theme["cursor_color"],
                                     font=("Arial", 11))
        self.search_entry.pack(side=tk.LEFT, padx=(0, 12))
        self.search_entry.bind('<KeyRelease>', self.on_search)

        btn_frame = tk.Frame(search_frame, bg=self.current_theme["bg"])
        btn_frame.pack(side=tk.RIGHT)

        buttons = [
            ("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç", self.add_secret, 160),
            ("–û–±–Ω–æ–≤–∏—Ç—å", self.load_secrets, 100),
            ("üåô –¢–µ–º–∞", self.toggle_theme, 80),
            ("üö™ –í—ã–π—Ç–∏", self.exit_app, 80)
        ]

        for i, (text, command, width) in enumerate(buttons):
            btn = RoundedButton(btn_frame, text=text, command=command,
                                bg_color=self.current_theme["button_bg"],
                                fg_color=self.current_theme["button_fg"],
                                hover_color=self.current_theme["accent_hover"],
                                parent_bg_color=self.current_theme["bg"],
                                width=width, height=32, corner_radius=20)
            btn.grid(row=0, column=i, padx=(0, 6))

        content_frame = tk.Frame(main_frame, bg=self.current_theme["bg"])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=12, pady=8)

        list_frame = tk.Frame(content_frame, bg=self.current_theme["bg"])
        list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        tk.Label(list_frame, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:", bg=self.current_theme["bg"],
                 fg=self.current_theme["fg"], font=("Arial", 12)).pack(anchor=tk.W)

        self.secrets_list = tk.Listbox(list_frame, width=50, height=15,
                                       bg=self.current_theme["listbox_bg"], fg=self.current_theme["listbox_fg"],
                                       font=("Arial", 11))
        self.secrets_list.pack(fill=tk.BOTH, expand=True, pady=(8, 0))
        self.secrets_list.bind('<<ListboxSelect>>', self.on_secret_select)

        scrollbar = tk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.secrets_list.yview,
                                 bg=self.current_theme["scrollbar_bg"],
                                 troughcolor=self.current_theme["scrollbar_trough"],
                                 activebackground=self.current_theme["scrollbar_active"])
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.secrets_list.configure(yscrollcommand=scrollbar.set)

        details_frame = tk.LabelFrame(content_frame, text="–î–µ—Ç–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–∞", padx=12, pady=12,
                                      bg=self.current_theme["bg"], fg=self.current_theme["fg"],
                                      font=("Arial", 12))
        details_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(12, 0))

        details_header = tk.Frame(details_frame, bg=self.current_theme["bg"])
        details_header.pack(fill=tk.X, pady=(0, 8))

        tk.Label(details_header, text="–î–µ—Ç–∞–ª–∏:", bg=self.current_theme["bg"], fg=self.current_theme["fg"],
                 font=("Arial", 12)).pack(
            side=tk.LEFT)

        self.toggle_password_btn = tk.Button(
            details_header, text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å", bg=self.current_theme["button_bg"],
            fg=self.current_theme["button_fg"], command=self.toggle_password_visibility,
            font=("Arial", 11)
        )
        self.toggle_password_btn.pack(side=tk.RIGHT)
        self.password_visible = False

        self.details_text = tk.Text(details_frame, width=40, height=15, state=tk.DISABLED,
                                    bg=self.current_theme["text_bg"], fg=self.current_theme["text_fg"],
                                    insertbackground=self.current_theme["cursor_color"],
                                    font=("Arial", 11))
        self.details_text.pack(fill=tk.BOTH, expand=True)

        btn_frame2 = tk.Frame(main_frame, bg=self.current_theme["bg"])
        btn_frame2.pack(fill=tk.X, pady=12, padx=12)

        action_buttons = [
            ("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", self.copy_connection_string, 220),
            ("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", self.delete_secret, 150),
            ("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", self.show_db_connection, 180)
        ]

        for i, (text, command, width) in enumerate(action_buttons):
            btn = RoundedButton(btn_frame2, text=text, command=command,
                                bg_color=self.current_theme["button_bg"],
                                fg_color=self.current_theme["button_fg"],
                                hover_color=self.current_theme["accent_hover"],
                                parent_bg_color=self.current_theme["bg"],
                                width=width, height=32, corner_radius=20)
            btn.grid(row=0, column=i, padx=(0, 6))

        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = tk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN,
                              bg=self.current_theme["status_bg"], fg=self.current_theme["status_fg"],
                              font=("Arial", 11))
        status_bar.pack(fill=tk.X, padx=12, pady=(0, 12))

    def exit_app(self):
        if messagebox.askyesno("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"):
            self.root.destroy()

    def apply_theme(self):
        theme = self.current_theme
        self.root.configure(bg=theme["bg"])
        self.apply_theme_to_widget(self.root, theme)

    def apply_theme_to_widget(self, widget, theme):
        try:
            if isinstance(widget, tk.Entry):
                widget.configure(bg=theme["entry_bg"], fg=theme["entry_fg"],
                                 insertbackground=theme["cursor_color"])
            elif isinstance(widget, tk.Listbox):
                widget.configure(bg=theme["listbox_bg"], fg=theme["listbox_fg"])
            elif isinstance(widget, tk.Text):
                widget.configure(bg=theme["text_bg"], fg=theme["text_fg"],
                                 insertbackground=theme["cursor_color"])
            elif isinstance(widget, tk.Label):
                widget.configure(bg=theme["bg"], fg=theme["fg"])
            elif isinstance(widget, tk.Frame):
                widget.configure(bg=theme["bg"])
            elif isinstance(widget, tk.Button):
                widget.configure(bg=theme["button_bg"], fg=theme["button_fg"])
            elif isinstance(widget, tk.Scrollbar):
                widget.configure(bg=theme["scrollbar_bg"], troughcolor=theme["scrollbar_trough"])
            elif isinstance(widget, tk.LabelFrame):
                widget.configure(bg=theme["bg"], fg=theme["fg"])
        except:
            pass

        for child in widget.winfo_children():
            self.apply_theme_to_widget(child, theme)

    def toggle_theme(self):
        self.current_theme = self.theme_manager.toggle_theme()
        self.apply_theme()
        self.load_secrets()

    def load_secrets(self, search_term=None):
        if search_term is None:
            search_term = self.search_var.get()

        secrets = self.db.search_secrets(search_term)
        self.secrets_list.delete(0, tk.END)

        for secret in secrets:
            self.secrets_list.insert(tk.END, secret)

        count = len(secrets)
        if count == 0 and search_term:
            self.status_var.set(f"‚ùå –°–µ–∫—Ä–µ—Ç '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, f"‚ùå –°–µ–∫—Ä–µ—Ç '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.DISABLED)
        elif search_term:
            self.status_var.set(f"–ù–∞–π–¥–µ–Ω–æ {count} —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
        else:
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å–µ–∫—Ä–µ—Ç–æ–≤")

    def on_search(self, event=None):
        self.load_secrets()

    def add_secret(self):
        dialog = AddSecretDialog(self.root, self.current_theme)
        if dialog.result:
            name, secret_data = dialog.result

            master_password = self.ask_password_for_secret(name, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            if not master_password or not self.db.verify_master_password(master_password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                return

            if self.db.save_secret(name, secret_data, master_password):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ–∫—Ä–µ—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                self.load_secrets()
                self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    def on_secret_select(self, event=None):
        selection = self.secrets_list.curselection()
        if not selection:
            return

        secret_name = self.secrets_list.get(selection[0])
        self.show_secret_details(secret_name)

    def show_secret_details(self, secret_name):
        self.password_visible = False
        self.toggle_password_btn.config(text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")

        master_password = self.ask_password_for_secret(secret_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(secret_name, master_password)
        if secret_data is None:
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, f"‚ùå –°–µ–∫—Ä–µ—Ç '{secret_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.DISABLED)
            self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{secret_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        self.details_text.config(state=tk.NORMAL)
        self.details_text.delete(1.0, tk.END)

        details = f"üîê {secret_name}\n" + "=" * 40 + "\n\n"
        details += f"üìç –•–æ—Å—Ç: {secret_data.get('host', 'N/A')}\n"
        details += f"üë§ –õ–æ–≥–∏–Ω: {secret_data.get('username', 'N/A')}\n"
        details += f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(secret_data.get('password', ''))}\n"
        details += f"üìä –¢–∏–ø: {secret_data.get('type', 'Database')}\n"

        self.details_text.insert(1.0, details)
        self.details_text.config(state=tk.DISABLED)

        self.current_secret_name = secret_name
        self.current_secret_data = secret_data
        self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç: {secret_name}")

    def toggle_password_visibility(self):
        if not self.current_secret_name:
            return

        if self.password_visible:
            self.show_secret_details(self.current_secret_name)
            self.toggle_password_btn.config(text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
            self.password_visible = False
        else:
            master_password = self.ask_password_for_secret(self.current_secret_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä–æ–ª—è")
            if not master_password or not self.db.verify_master_password(master_password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                return

            secret_data = self.db.get_secret(self.current_secret_name, master_password)
            if secret_data is None:
                return

            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)

            details = f"üîê {self.current_secret_name}\n" + "=" * 40 + "\n\n"
            details += f"üìç –•–æ—Å—Ç: {secret_data.get('host', 'N/A')}\n"
            details += f"üë§ –õ–æ–≥–∏–Ω: {secret_data.get('username', 'N/A')}\n"
            details += f"üîë –ü–∞—Ä–æ–ª—å: {secret_data.get('password', '')}\n"
            details += f"üìä –¢–∏–ø: {secret_data.get('type', 'Database')}\n"

            self.details_text.insert(1.0, details)
            self.details_text.config(state=tk.DISABLED)

            self.toggle_password_btn.config(text="üôà –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å")
            self.password_visible = True

    def copy_connection_string(self):
        if not hasattr(self, 'current_secret_name') or not self.current_secret_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç")
            return

        master_password = self.ask_password_for_secret(self.current_secret_name, "–¥–æ—Å—Ç—É–ø–∞ –∫")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(self.current_secret_name, master_password)
        if not secret_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–∞")
            return

        conn_string = f"host={secret_data.get('host', '')} port={secret_data.get('port', '')} "
        conn_string += f"dbname={secret_data.get('database', '')} user={secret_data.get('username', '')} "
        conn_string += f"password={secret_data.get('password', '')}"

        self.root.clipboard_clear()
        self.root.clipboard_append(conn_string)
        self.status_var.set(f"–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {self.current_secret_name}")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    def delete_secret(self):
        selection = self.secrets_list.curselection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        secret_name = self.secrets_list.get(selection[0])

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç '{secret_name}'?"):
            master_password = self.ask_password_for_secret(secret_name, "—É–¥–∞–ª–µ–Ω–∏—è")
            if not master_password or not self.db.verify_master_password(master_password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                return

            self.db.delete_secret(secret_name)
            self.load_secrets()
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.config(state=tk.DISABLED)
            self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{secret_name}' —É–¥–∞–ª–µ–Ω")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ–∫—Ä–µ—Ç '{secret_name}' —É–¥–∞–ª–µ–Ω")

    def show_db_connection(self):
        if not hasattr(self, 'current_secret_name') or not self.current_secret_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç")
            return

        master_password = self.ask_password_for_secret(self.current_secret_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(self.current_secret_name, master_password)
        if not secret_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–∞")
            return

        conn_info = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î:\n\n"
        conn_info += f"–•–æ—Å—Ç: {secret_data.get('host', 'N/A')}\n"
        conn_info += f"–õ–æ–≥–∏–Ω: {secret_data.get('username', 'N/A')}\n"
        conn_info += f"–ü–∞—Ä–æ–ª—å: {secret_data.get('password', 'N/A')}"

        messagebox.showinfo(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {self.current_secret_name}", conn_info)
