#–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
import tkinter as tk
from tkinter import messagebox, simpledialog

from database import Database
from theme import Theme
from widgets import RoundedButton
from dialogs import AddSecretDialog


class SecretWallet:
    #–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∫—Ä–µ—Ç–æ–≤

    def __init__(self, root):
        self.root = root
        self.root.title("üîê –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∫—Ä–µ—Ç–æ–≤")
        self.root.geometry("800x600")

        self.db = Database()
        self.current_secret_name = None
        self.current_secret_data = None
        self.theme_manager = Theme()
        self.current_theme = self.theme_manager.get_theme()

        self.verify_master_password_on_startup()
        self.setup_ui()
        self.apply_theme()
        self.load_secrets()

    def verify_master_password_on_startup(self):
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if not self.db.is_master_password_set():
            messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.")

            while True:
                password = self.ask_password("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")
                if not password:
                    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                           "–ë–µ–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ–∫—Ä–µ—Ç—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã?"):
                        self.root.destroy()
                        return
                    continue

                confirm = self.ask_password("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")

                if password == confirm:
                    if self.db.set_master_password(password):
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                        break
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            password = self.ask_password("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:")
            if not password or not self.db.verify_master_password(password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                self.root.destroy()

    def ask_password(self, title, prompt):
        #–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –±–µ–∑ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        dialog = tk.Toplevel(self.root)
        dialog.title(title)
        dialog.geometry("300x150")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.configure(bg=self.current_theme["bg_secondary"])

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        dialog.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() - dialog.winfo_width()) // 2
        y = self.root.winfo_y() + (self.root.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

        result = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ —Å—Å—ã–ª–∫–µ

        tk.Label(dialog, text=prompt, bg=self.current_theme["bg_secondary"],
                 fg=self.current_theme["fg"], wraplength=280).pack(pady=10)

        password_var = tk.StringVar()
        entry = tk.Entry(dialog, textvariable=password_var, show='*',
                         bg=self.current_theme["entry_bg"], fg=self.current_theme["entry_fg"],
                         width=30)
        entry.pack(pady=5)
        entry.focus()

        def on_ok():
            result[0] = password_var.get()
            dialog.destroy()

        def on_cancel():
            result[0] = ""
            dialog.destroy()

        btn_frame = tk.Frame(dialog, bg=self.current_theme["bg_secondary"])
        btn_frame.pack(pady=10)

        tk.Button(btn_frame, text="OK", command=on_ok,
                  bg=self.current_theme["button_bg"], fg=self.current_theme["button_fg"]).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=on_cancel,
                  bg=self.current_theme["button_bg"], fg=self.current_theme["button_fg"]).pack(side=tk.LEFT, padx=5)

        dialog.bind('<Return>', lambda e: on_ok())
        dialog.bind('<Escape>', lambda e: on_cancel())

        self.root.wait_window(dialog)
        return result[0]

    def ask_password_for_secret(self, secret_name, action="–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
        dialog.geometry("350x120")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.configure(bg=self.current_theme["bg_secondary"])

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        dialog.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() - dialog.winfo_width()) // 2
        y = self.root.winfo_y() + (self.root.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

        result = [None]

        tk.Label(dialog, text=f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è {action} —Å–µ–∫—Ä–µ—Ç–∞ '{secret_name}':",
                 bg=self.current_theme["bg_secondary"], fg=self.current_theme["fg"],
                 wraplength=330).pack(pady=10)

        password_var = tk.StringVar()
        entry = tk.Entry(dialog, textvariable=password_var, show='*',
                         bg=self.current_theme["entry_bg"], fg=self.current_theme["entry_fg"],
                         width=30)
        entry.pack(pady=5)
        entry.focus()

        def on_ok():
            result[0] = password_var.get()
            dialog.destroy()

        def on_cancel():
            result[0] = ""
            dialog.destroy()

        btn_frame = tk.Frame(dialog, bg=self.current_theme["bg_secondary"])
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="OK", command=on_ok,
                  bg=self.current_theme["button_bg"], fg=self.current_theme["button_fg"]).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=on_cancel,
                  bg=self.current_theme["button_bg"], fg=self.current_theme["button_fg"]).pack(side=tk.LEFT, padx=5)

        dialog.bind('<Return>', lambda e: on_ok())
        dialog.bind('<Escape>', lambda e: on_cancel())

        self.root.wait_window(dialog)
        return result[0]

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ setup_ui –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        main_frame = tk.Frame(self.root, bg=self.current_theme["bg"])
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Search frame
        search_frame = tk.Frame(main_frame, bg=self.current_theme["bg"])
        search_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))

        tk.Label(search_frame, text="–ü–æ–∏—Å–∫:", bg=self.current_theme["bg"], fg=self.current_theme["fg"]).grid(
            row=0, column=0, padx=(0, 5))

        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=40,
                                     bg=self.current_theme["entry_bg"], fg=self.current_theme["entry_fg"])
        self.search_entry.grid(row=0, column=1, padx=(0, 10))
        self.search_entry.bind('<KeyRelease>', self.on_search)

        btn_frame = tk.Frame(search_frame, bg=self.current_theme["bg"])
        btn_frame.grid(row=0, column=2)

        buttons = [
            ("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç", self.add_secret, 160),
            ("–û–±–Ω–æ–≤–∏—Ç—å", self.load_secrets, 100),
            ("üåô –¢–µ–º–∞", self.toggle_theme, 80)
        ]

        for i, (text, command, width) in enumerate(buttons):
            btn = RoundedButton(btn_frame, text=text, command=command,
                                bg_color=self.current_theme["button_bg"],
                                fg_color=self.current_theme["button_fg"],
                                hover_color=self.current_theme["accent_hover"],
                                parent_bg_color=self.current_theme["bg"],
                                width=width, height=30, corner_radius=20)
            btn.grid(row=0, column=i, padx=(0, 5))

        # List frame
        list_frame = tk.Frame(main_frame, bg=self.current_theme["bg"])
        list_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))

        tk.Label(list_frame, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:", bg=self.current_theme["bg"],
                 fg=self.current_theme["fg"]).grid(
            row=0, column=0, sticky=tk.W)

        self.secrets_list = tk.Listbox(list_frame, width=50, height=15,
                                       bg=self.current_theme["listbox_bg"], fg=self.current_theme["listbox_fg"])
        self.secrets_list.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.secrets_list.bind('<Double-Button-1>', self.on_secret_select)

        scrollbar = tk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.secrets_list.yview,
                                 bg=self.current_theme["scrollbar_bg"],
                                 troughcolor=self.current_theme["scrollbar_trough"],
                                 activebackground=self.current_theme["scrollbar_active"])
        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        self.secrets_list.configure(yscrollcommand=scrollbar.set)

        # Details frame
        details_frame = tk.LabelFrame(main_frame, text="–î–µ—Ç–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–∞", padx=10, pady=10,
                                      bg=self.current_theme["bg"], fg=self.current_theme["fg"])
        details_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))

        self.details_text = tk.Text(details_frame, width=40, height=15, state=tk.DISABLED,
                                    bg=self.current_theme["text_bg"], fg=self.current_theme["text_fg"])
        self.details_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Action buttons
        btn_frame2 = tk.Frame(main_frame, bg=self.current_theme["bg"])
        btn_frame2.grid(row=2, column=0, columnspan=2, pady=(10, 0))

        action_buttons = [
            ("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", self.copy_connection_string, 220),
            ("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", self.delete_secret, 150),
            ("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", self.show_db_connection, 180)
        ]

        for i, (text, command, width) in enumerate(action_buttons):
            btn = RoundedButton(btn_frame2, text=text, command=command,
                                bg_color=self.current_theme["button_bg"],
                                fg_color=self.current_theme["button_fg"],
                                hover_color=self.current_theme["accent_hover"],
                                parent_bg_color=self.current_theme["bg"],
                                width=width, height=30, corner_radius=20)
            btn.grid(row=0, column=i, padx=(0, 5))

        # Status bar
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = tk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN,
                              bg=self.current_theme["status_bg"], fg=self.current_theme["status_fg"])
        status_bar.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))

        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        list_frame.rowconfigure(1, weight=1)
        list_frame.columnconfigure(0, weight=1)
        details_frame.rowconfigure(0, weight=1)
        details_frame.columnconfigure(0, weight=1)

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º –≤–∏–¥–∂–µ—Ç–∞–º"""
        theme = self.current_theme
        self.root.configure(bg=theme["bg"])
        self.apply_theme_to_widget(self.root, theme)

    def apply_theme_to_widget(self, widget, theme):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –≤–∏–¥–∂–µ—Ç—É –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        try:
            if isinstance(widget, tk.Entry):
                widget.configure(bg=theme["entry_bg"], fg=theme["entry_fg"], insertbackground=theme["fg"])
            elif isinstance(widget, tk.Listbox):
                widget.configure(bg=theme["listbox_bg"], fg=theme["listbox_fg"])
            elif isinstance(widget, tk.Text):
                widget.configure(bg=theme["text_bg"], fg=theme["text_fg"], insertbackground=theme["fg"])
            elif isinstance(widget, tk.Label):
                widget.configure(bg=theme["bg"], fg=theme["fg"])
            elif isinstance(widget, tk.Frame):
                widget.configure(bg=theme["bg"])
            elif isinstance(widget, tk.Button):
                widget.configure(bg=theme["button_bg"], fg=theme["button_fg"])
            elif isinstance(widget, tk.Scrollbar):
                widget.configure(bg=theme["scrollbar_bg"], troughcolor=theme["scrollbar_trough"])
            elif isinstance(widget, tk.LabelFrame):
                widget.configure(bg=theme["bg"], fg=theme["fg"])
        except:
            pass

        for child in widget.winfo_children():
            self.apply_theme_to_widget(child, theme)

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        self.current_theme = self.theme_manager.toggle_theme()
        self.apply_theme()
        self.load_secrets()

    def load_secrets(self, search_term=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        if search_term is None:
            search_term = self.search_var.get()

        secrets = self.db.search_secrets(search_term)
        self.secrets_list.delete(0, tk.END)

        for secret in secrets:
            self.secrets_list.insert(tk.END, secret)

        count = len(secrets)
        if count == 0 and search_term:
            self.status_var.set(f"‚ùå –°–µ–∫—Ä–µ—Ç '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, f"‚ùå –°–µ–∫—Ä–µ—Ç '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.DISABLED)
        elif search_term:
            self.status_var.set(f"–ù–∞–π–¥–µ–Ω–æ {count} —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
        else:
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å–µ–∫—Ä–µ—Ç–æ–≤")

    def on_search(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞"""
        self.load_secrets()

    def add_secret(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞"""
        dialog = AddSecretDialog(self.root, self.current_theme)
        if dialog.result:
            name, secret_data = dialog.result

            master_password = self.ask_password_for_secret(name, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            if not master_password or not self.db.verify_master_password(master_password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
                return

            if self.db.save_secret(name, secret_data, master_password):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ–∫—Ä–µ—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                self.load_secrets()
                self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    def on_secret_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ä–µ—Ç–∞"""
        selection = self.secrets_list.curselection()
        if not selection:
            return

        secret_name = self.secrets_list.get(selection[0])
        self.show_secret_details(secret_name)

    def show_secret_details(self, secret_name):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞"""
        master_password = self.ask_password_for_secret(secret_name, "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(secret_name, master_password)
        if secret_data is None:
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, f"‚ùå –°–µ–∫—Ä–µ—Ç '{secret_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.details_text.config(state=tk.DISABLED)
            self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{secret_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        self.details_text.config(state=tk.NORMAL)
        self.details_text.delete(1.0, tk.END)

        details = f"üîê {secret_name}\n" + "=" * 40 + "\n\n"
        details += f"üìç –•–æ—Å—Ç: {secret_data.get('host', 'N/A')}\n"
        details += f"üö™ –ü–æ—Ä—Ç: {secret_data.get('port', 'N/A')}\n"
        details += f"üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {secret_data.get('database', 'N/A')}\n"
        details += f"üë§ –õ–æ–≥–∏–Ω: {secret_data.get('username', 'N/A')}\n"
        details += f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(secret_data.get('password', ''))}\n"
        details += f"üìä –¢–∏–ø: {secret_data.get('type', 'Database')}\n"

        self.details_text.insert(1.0, details)
        self.details_text.config(state=tk.DISABLED)

        self.current_secret_name = secret_name
        self.current_secret_data = secret_data
        self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç: {secret_name}")

    def copy_connection_string(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not hasattr(self, 'current_secret_name') or not self.current_secret_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç")
            return

        master_password = self.ask_password_for_secret(self.current_secret_name, "–¥–æ—Å—Ç—É–ø–∞ –∫")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(self.current_secret_name, master_password)
        if not secret_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–∞")
            return

        conn_string = f"host={secret_data.get('host', '')} port={secret_data.get('port', '')} " \
                      f"dbname={secret_data.get('database', '')} user={secret_data.get('username', '')} " \
                      f"password={secret_data.get('password', '')}"

        messagebox.showinfo("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n{conn_string}")
        self.status_var.set("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def show_db_connection(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if not hasattr(self, 'current_secret_name') or not self.current_secret_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç")
            return

        master_password = self.ask_password_for_secret(self.current_secret_name, "–¥–æ—Å—Ç—É–ø–∞ –∫")
        if not master_password or not self.db.verify_master_password(master_password):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!")
            return

        secret_data = self.db.get_secret(self.current_secret_name, master_password)
        if not secret_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–∞")
            return

        demo_text = f"""üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î

1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–ª–∏–µ–Ω—Ç –ë–î
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

   üìç –•–æ—Å—Ç: {secret_data.get('host', 'N/A')}
   üö™ –ü–æ—Ä—Ç: {secret_data.get('port', 'N/A')}
   üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {secret_data.get('database', 'N/A')}
   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {secret_data.get('username', 'N/A')}
   üîë –ü–∞—Ä–æ–ª—å: {secret_data.get('password', '')}

‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º!"""

        messagebox.showinfo("–î–µ–º–æ: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", demo_text)

    def delete_secret(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞"""
        selection = self.secrets_list.curselection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        secret_name = self.secrets_list.get(selection[0])

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç '{secret_name}'?"):
            self.db.delete_secret(secret_name)
            self.load_secrets()
            self.status_var.set(f"–°–µ–∫—Ä–µ—Ç '{secret_name}' —É–¥–∞–ª–µ–Ω")
            self.details_text.config(state=tk.NORMAL)
            self.details_text.delete(1.0, tk.END)
            self.details_text.config(state=tk.DISABLED)
            self.current_secret_name = None
            self.current_secret_data = None